<?php
    class System{
<<<<<<< HEAD
        public static function sendmail($email,$subject,$message){
            $header = "From: ashansilva.17@cse.mrt.ac.lk";
            if(mail($email,$subject,$message,$header)){
=======
        public static function sendmail($email, $subject, $message){
            $header = "From: sahanjayasingha12@gmail.com";
            if(mail($email, $subject, $message, $header)){
>>>>>>> model-sample
                return true;
            }
            else{
                return false;
            }
        }

<<<<<<< HEAD
        public static function verifypassword($password,$repassword){
            if($password==$repassword){
=======
        public static function email_exists($email){
            $db = DB::getInstance();
            $results_obj = $db->query("SELECT customer_id FROM registered_customers WHERE email = ?", [$email]);
            $row_count = $results_obj->get_row_count();
            // dnd($row_count);
            if($row_count){
>>>>>>> model-sample
                return true;
            }
            else{
                return false;
            }
        }
<<<<<<< HEAD
        public static function encrypt($name){
            return sha1($name);
        }
=======
    
        public static function verify_password($email, $password){
            $db = DB::getInstance();
            $results_obj = $db->query("SELECT password FROM registered_customers WHERE email = ?", [$email]);
            if($results_obj->get_row_count() == 1){
                //dnd($results_obj->results());
                $hash = $results_obj->results()[0]->password;
                //dnd($hash);
                // return $password == $hash;
                return password_verify($password, $hash);      // built-in method. hash should be generated by password_hash method
            }
        }
    
        public static function validate_password($password){
            $pattern = '/^(?=.*[!@#$%^&*+=-_\/><.,:;])(?=.*[0-9])(?=.*[A-Z]).{6,}$/';
            if (preg_match($pattern, $password)){
                if(!preg_match('/\s/', $password) && !preg_match('/\'/', $password) && !preg_match('/\"/', $password)){
                    // dnd("true");
                    return true;
                }
                else{
                    Alert::set('Whitespaces & Quotation marks are not allowed in the password');
                    return false;
                }                
            }
            else{
                // Alert::set('Password does not match the required security level. Follow the tips shown at the form.');
                return false;
            }
        }

        /*public static function verifypassword($password,$repassword){
            if($password==$repassword){
                return true;
            }
            else{
                return false;
            }
        }*/

        public static function encrypt($name){
            return sha1($name);
        }

>>>>>>> model-sample
        public static function generaterandcode(){
            return substr(str_shuffle("0123456789"),0,5);
        }
    }